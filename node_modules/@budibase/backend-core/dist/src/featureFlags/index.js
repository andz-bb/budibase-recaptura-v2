"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TenantFeatureFlag = exports.getTenantFeatureFlags = exports.isEnabled = void 0;
const environment_1 = __importDefault(require("../environment"));
const tenancy = __importStar(require("../tenancy"));
/**
 * Read the TENANT_FEATURE_FLAGS env var and return an array of features flags for each tenant.
 * The env var is formatted as:
 *  tenant1:feature1:feature2,tenant2:feature1
 */
function getFeatureFlags() {
    if (!environment_1.default.TENANT_FEATURE_FLAGS) {
        return;
    }
    const tenantFeatureFlags = {};
    environment_1.default.TENANT_FEATURE_FLAGS.split(",").forEach(tenantToFeatures => {
        const [tenantId, ...features] = tenantToFeatures.split(":");
        features.forEach(feature => {
            if (!tenantFeatureFlags[tenantId]) {
                tenantFeatureFlags[tenantId] = [];
            }
            tenantFeatureFlags[tenantId].push(feature);
        });
    });
    return tenantFeatureFlags;
}
const TENANT_FEATURE_FLAGS = getFeatureFlags();
function isEnabled(featureFlag) {
    const tenantId = tenancy.getTenantId();
    const flags = getTenantFeatureFlags(tenantId);
    return flags.includes(featureFlag);
}
exports.isEnabled = isEnabled;
function getTenantFeatureFlags(tenantId) {
    const flags = [];
    if (TENANT_FEATURE_FLAGS) {
        const globalFlags = TENANT_FEATURE_FLAGS["*"];
        const tenantFlags = TENANT_FEATURE_FLAGS[tenantId];
        if (globalFlags) {
            flags.push(...globalFlags);
        }
        if (tenantFlags) {
            flags.push(...tenantFlags);
        }
    }
    return flags;
}
exports.getTenantFeatureFlags = getTenantFeatureFlags;
var TenantFeatureFlag;
(function (TenantFeatureFlag) {
    TenantFeatureFlag["LICENSING"] = "LICENSING";
    TenantFeatureFlag["GOOGLE_SHEETS"] = "GOOGLE_SHEETS";
    TenantFeatureFlag["USER_GROUPS"] = "USER_GROUPS";
})(TenantFeatureFlag = exports.TenantFeatureFlag || (exports.TenantFeatureFlag = {}));
//# sourceMappingURL=index.js.map