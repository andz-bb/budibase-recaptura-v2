"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const types_1 = require("@budibase/types");
const joi_1 = __importDefault(require("joi"));
const DATASOURCE_TYPES = [
    "Relational",
    "Non-relational",
    "Spreadsheet",
    "Object store",
    "Graph",
    "API",
];
function runJoi(validator, schema) {
    const { error } = validator.validate(schema);
    if (error) {
        throw error;
    }
}
function validateComponent(schema) {
    const validator = joi_1.default.object({
        type: joi_1.default.string().allow("component").required(),
        metadata: joi_1.default.object().unknown(true).required(),
        hash: joi_1.default.string().optional(),
        version: joi_1.default.string().optional(),
        schema: joi_1.default
            .object({
            name: joi_1.default.string().required(),
            settings: joi_1.default.array().items(joi_1.default.object().unknown(true)).required(),
        })
            .unknown(true),
    });
    runJoi(validator, schema);
}
function validateDatasource(schema) {
    const fieldValidator = joi_1.default.object({
        type: joi_1.default
            .string()
            .allow(...Object.values(types_1.DatasourceFieldType))
            .required(),
        required: joi_1.default.boolean().required(),
        default: joi_1.default.any(),
        display: joi_1.default.string(),
    });
    const queryValidator = joi_1.default
        .object({
        type: joi_1.default.string().allow(...Object.values(types_1.QueryType)),
        readable: joi_1.default.boolean(),
        fields: joi_1.default.object().pattern(joi_1.default.string(), fieldValidator),
    })
        .required();
    const validator = joi_1.default.object({
        type: joi_1.default.string().allow("datasource").required(),
        metadata: joi_1.default.object().unknown(true).required(),
        hash: joi_1.default.string().optional(),
        version: joi_1.default.string().optional(),
        schema: joi_1.default.object({
            docs: joi_1.default.string(),
            friendlyName: joi_1.default.string().required(),
            type: joi_1.default.string().allow(...DATASOURCE_TYPES),
            description: joi_1.default.string().required(),
            datasource: joi_1.default.object().pattern(joi_1.default.string(), fieldValidator).required(),
            query: joi_1.default
                .object()
                .pattern(joi_1.default.string(), queryValidator)
                .unknown(true)
                .required(),
            extra: joi_1.default.object().pattern(joi_1.default.string(), joi_1.default.object({
                type: joi_1.default.string().required(),
                displayName: joi_1.default.string().required(),
                required: joi_1.default.boolean(),
                data: joi_1.default.object(),
            })),
        }),
    });
    runJoi(validator, schema);
}
function validate(schema) {
    switch (schema === null || schema === void 0 ? void 0 : schema.type) {
        case types_1.PluginType.COMPONENT:
            validateComponent(schema);
            break;
        case types_1.PluginType.DATASOURCE:
            validateDatasource(schema);
            break;
        default:
            throw new Error(`Unknown plugin type - check schema.json: ${schema.type}`);
    }
}
exports.validate = validate;
//# sourceMappingURL=utils.js.map