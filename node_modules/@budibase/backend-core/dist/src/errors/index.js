"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const http_1 = require("./http");
const licensing_1 = require("./licensing");
const licensing = __importStar(require("./licensing"));
const codes = Object.assign({}, licensing.codes);
const types = [licensing.type];
const context = Object.assign({}, licensing.context);
const getPublicError = (err) => {
    let error;
    if (err.code || err.type) {
        // add generic error information
        error = {
            code: err.code,
            type: err.type,
        };
        if (err.code && context[err.code]) {
            error = Object.assign(Object.assign({}, error), context[err.code](err));
        }
    }
    return error;
};
const pkg = {
    codes,
    types,
    errors: {
        UsageLimitError: licensing_1.UsageLimitError,
        FeatureDisabledError: licensing_1.FeatureDisabledError,
        HTTPError: http_1.HTTPError,
    },
    getPublicError,
};
module.exports = pkg;
//# sourceMappingURL=index.js.map