"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteTenant = exports.removeUserFromInfoDB = void 0;
const db_1 = require("../db");
const tenancy_1 = require("../tenancy");
const TENANT_DOC = db_1.StaticDatabases.PLATFORM_INFO.docs.tenants;
const PLATFORM_INFO_DB = db_1.StaticDatabases.PLATFORM_INFO.name;
function removeTenantFromInfoDB(tenantId) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield (0, db_1.doWithDB)(PLATFORM_INFO_DB, (infoDb) => __awaiter(this, void 0, void 0, function* () {
                const tenants = (yield infoDb.get(TENANT_DOC));
                tenants.tenantIds = tenants.tenantIds.filter(id => id !== tenantId);
                yield infoDb.put(tenants);
            }));
        }
        catch (err) {
            console.error(`Error removing tenant ${tenantId} from info db`, err);
            throw err;
        }
    });
}
function removeUserFromInfoDB(dbUser) {
    return __awaiter(this, void 0, void 0, function* () {
        yield (0, db_1.doWithDB)(PLATFORM_INFO_DB, (infoDb) => __awaiter(this, void 0, void 0, function* () {
            const keys = [dbUser._id, dbUser.email];
            const userDocs = yield infoDb.allDocs({
                keys,
                include_docs: true,
            });
            const toDelete = userDocs.rows.map((row) => {
                return Object.assign(Object.assign({}, row.doc), { _deleted: true });
            });
            yield infoDb.bulkDocs(toDelete);
        }));
    });
}
exports.removeUserFromInfoDB = removeUserFromInfoDB;
function removeUsersFromInfoDB(tenantId) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0, tenancy_1.doWithGlobalDB)(tenantId, (db) => __awaiter(this, void 0, void 0, function* () {
            try {
                const allUsers = yield db.allDocs((0, db_1.getGlobalUserParams)(null, {
                    include_docs: true,
                }));
                yield (0, db_1.doWithDB)(PLATFORM_INFO_DB, (infoDb) => __awaiter(this, void 0, void 0, function* () {
                    const allEmails = allUsers.rows.map((row) => row.doc.email);
                    // get the id docs
                    let keys = allUsers.rows.map((row) => row.id);
                    // and the email docs
                    keys = keys.concat(allEmails);
                    // retrieve the docs and delete them
                    const userDocs = yield infoDb.allDocs({
                        keys,
                        include_docs: true,
                    });
                    const toDelete = userDocs.rows.map((row) => {
                        return Object.assign(Object.assign({}, row.doc), { _deleted: true });
                    });
                    yield infoDb.bulkDocs(toDelete);
                }));
            }
            catch (err) {
                console.error(`Error removing tenant ${tenantId} users from info db`, err);
                throw err;
            }
        }));
    });
}
function removeGlobalDB(tenantId) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0, tenancy_1.doWithGlobalDB)(tenantId, (db) => __awaiter(this, void 0, void 0, function* () {
            try {
                yield db.destroy();
            }
            catch (err) {
                console.error(`Error removing tenant ${tenantId} users from info db`, err);
                throw err;
            }
        }));
    });
}
function removeTenantApps(tenantId) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const apps = (yield (0, db_1.getAllApps)({ all: true }));
            const destroyPromises = apps.map(app => (0, db_1.doWithDB)(app.appId, (db) => db.destroy()));
            yield Promise.allSettled(destroyPromises);
        }
        catch (err) {
            console.error(`Error removing tenant ${tenantId} apps`, err);
            throw err;
        }
    });
}
// can't live in tenancy package due to circular dependency on db/utils
function deleteTenant(tenantId) {
    return __awaiter(this, void 0, void 0, function* () {
        yield removeTenantFromInfoDB(tenantId);
        yield removeUsersFromInfoDB(tenantId);
        yield removeGlobalDB(tenantId);
        yield removeTenantApps(tenantId);
    });
}
exports.deleteTenant = deleteTenant;
//# sourceMappingURL=deprovision.js.map