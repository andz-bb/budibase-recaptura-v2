import * as jwt from "./passport/jwt";
import * as local from "./passport/local";
import * as google from "./passport/google";
import * as oidc from "./passport/oidc";
import { authError, ssoCallbackUrl } from "./passport/utils";
import * as datasourceGoogle from "./passport/datasource/google";
import * as joiValidator from "./joi-validator";
declare const pkg: {
    google: typeof google;
    oidc: typeof oidc;
    jwt: typeof jwt;
    local: typeof local;
    authenticated: (noAuthPatterns?: import("@budibase/types").EndpointMatcher[], opts?: {
        publicAllowed?: boolean | undefined;
        populateUser?: Function | undefined;
    }) => (ctx: any, next: any) => Promise<any>;
    auditLog: (ctx: any, next: any) => Promise<any>;
    tenancy: (allowQueryStringPatterns: import("@budibase/types").EndpointMatcher[], noTenancyPatterns: import("@budibase/types").EndpointMatcher[], opts?: {
        noTenancyRequired?: boolean | undefined;
    }) => (ctx: any, next: any) => Promise<any>;
    authError: typeof authError;
    internalApi: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
    ssoCallbackUrl: typeof ssoCallbackUrl;
    datasource: {
        google: typeof datasourceGoogle;
    };
    csrf: (opts?: {
        noCsrfPatterns: import("@budibase/types").EndpointMatcher[];
    }) => (ctx: any, next: any) => Promise<any>;
    adminOnly: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
    builderOnly: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
    builderOrAdmin: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
    joiValidator: typeof joiValidator;
};
export = pkg;
