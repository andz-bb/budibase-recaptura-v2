"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ssoCallbackUrl = exports.authError = void 0;
const tenancy_1 = require("../../tenancy");
const db_1 = require("../../db");
const types_1 = require("@budibase/types");
/**
 * Utility to handle authentication errors.
 *
 * @param {*} done The passport callback.
 * @param {*} message Message that will be returned in the response body
 * @param {*} err (Optional) error that will be logged
 */
function authError(done, message, err) {
    return done(err, null, // never return a user
    { message: message });
}
exports.authError = authError;
function ssoCallbackUrl(db, config, type) {
    return __awaiter(this, void 0, void 0, function* () {
        // incase there is a callback URL from before
        if (config && config.callbackURL) {
            return config.callbackURL;
        }
        const publicConfig = yield (0, db_1.getScopedConfig)(db, {
            type: types_1.ConfigType.SETTINGS,
        });
        let callbackUrl = `/api/global/auth`;
        if ((0, tenancy_1.isMultiTenant)()) {
            callbackUrl += `/${(0, tenancy_1.getTenantId)()}`;
        }
        callbackUrl += `/${type}/callback`;
        return `${publicConfig.platformUrl}${callbackUrl}`;
    });
}
exports.ssoCallbackUrl = ssoCallbackUrl;
//# sourceMappingURL=utils.js.map