"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticateThirdParty = void 0;
const environment_1 = __importDefault(require("../../environment"));
const db_1 = require("../../db");
const utils_1 = require("./utils");
const utils_2 = require("../../utils");
const sessions_1 = require("../../security/sessions");
const users = __importStar(require("../../users"));
const tenancy_1 = require("../../tenancy");
const node_fetch_1 = __importDefault(require("node-fetch"));
const jwt = require("jsonwebtoken");
/**
 * Common authentication logic for third parties. e.g. OAuth, OIDC.
 */
function authenticateThirdParty(thirdPartyUser, requireLocalAccount = true, done, saveUserFn) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!saveUserFn) {
            throw new Error("Save user function must be provided");
        }
        if (!thirdPartyUser.provider) {
            return (0, utils_1.authError)(done, "third party user provider required");
        }
        if (!thirdPartyUser.userId) {
            return (0, utils_1.authError)(done, "third party user id required");
        }
        if (!thirdPartyUser.email) {
            return (0, utils_1.authError)(done, "third party user email required");
        }
        // use the third party id
        const userId = (0, db_1.generateGlobalUserID)(thirdPartyUser.userId);
        const db = (0, tenancy_1.getGlobalDB)();
        let dbUser;
        // try to load by id
        try {
            dbUser = yield db.get(userId);
        }
        catch (err) {
            // abort when not 404 error
            if (!err.status || err.status !== 404) {
                return (0, utils_1.authError)(done, "Unexpected error when retrieving existing user", err);
            }
        }
        // fallback to loading by email
        if (!dbUser) {
            dbUser = yield users.getGlobalUserByEmail(thirdPartyUser.email);
        }
        // exit early if there is still no user and auto creation is disabled
        if (!dbUser && requireLocalAccount) {
            return (0, utils_1.authError)(done, "Email does not yet exist. You must set up your local budibase account first.");
        }
        // first time creation
        if (!dbUser) {
            // setup a blank user using the third party id
            dbUser = {
                _id: userId,
                email: thirdPartyUser.email,
                roles: {},
            };
        }
        dbUser = yield syncUser(dbUser, thirdPartyUser);
        // never prompt for password reset
        dbUser.forceResetPassword = false;
        // create or sync the user
        try {
            yield saveUserFn(dbUser, { hashPassword: false, requirePassword: false });
        }
        catch (err) {
            return (0, utils_1.authError)(done, err);
        }
        // now that we're sure user exists, load them from the db
        dbUser = yield db.get(dbUser._id);
        // authenticate
        const sessionId = (0, utils_2.newid)();
        const tenantId = (0, tenancy_1.getTenantId)();
        yield (0, sessions_1.createASession)(dbUser._id, { sessionId, tenantId });
        dbUser.token = jwt.sign({
            userId: dbUser._id,
            sessionId,
        }, environment_1.default.JWT_SECRET);
        return done(null, dbUser);
    });
}
exports.authenticateThirdParty = authenticateThirdParty;
function syncProfilePicture(user, thirdPartyUser) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const pictureUrl = (_a = thirdPartyUser.profile) === null || _a === void 0 ? void 0 : _a._json.picture;
        if (pictureUrl) {
            const response = yield (0, node_fetch_1.default)(pictureUrl);
            if (response.status === 200) {
                const type = response.headers.get("content-type");
                if (type.startsWith("image/")) {
                    user.pictureUrl = pictureUrl;
                }
            }
        }
        return user;
    });
}
/**
 * @returns a user that has been sync'd with third party information
 */
function syncUser(user, thirdPartyUser) {
    return __awaiter(this, void 0, void 0, function* () {
        // provider
        user.provider = thirdPartyUser.provider;
        user.providerType = thirdPartyUser.providerType;
        if (thirdPartyUser.profile) {
            const profile = thirdPartyUser.profile;
            if (profile.name) {
                const name = profile.name;
                // first name
                if (name.givenName) {
                    user.firstName = name.givenName;
                }
                // last name
                if (name.familyName) {
                    user.lastName = name.familyName;
                }
            }
            user = yield syncProfilePicture(user, thirdPartyUser);
            // profile
            user.thirdPartyProfile = Object.assign({}, profile._json);
        }
        // oauth tokens for future use
        if (thirdPartyUser.oauth2) {
            user.oauth2 = Object.assign({}, thirdPartyUser.oauth2);
        }
        return user;
    });
}
//# sourceMappingURL=third-party-common.js.map