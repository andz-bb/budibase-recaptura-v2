"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCallbackUrl = exports.strategyFactory = exports.buildVerifyFn = void 0;
const utils_1 = require("./utils");
const third_party_common_1 = require("./third-party-common");
const types_1 = require("@budibase/types");
const GoogleStrategy = require("passport-google-oauth").OAuth2Strategy;
function buildVerifyFn(saveUserFn) {
    return (accessToken, refreshToken, profile, done) => {
        const thirdPartyUser = {
            provider: profile.provider,
            providerType: "google",
            userId: profile.id,
            profile: profile,
            email: profile._json.email,
            oauth2: {
                accessToken,
                refreshToken,
            },
        };
        return (0, third_party_common_1.authenticateThirdParty)(thirdPartyUser, true, // require local accounts to exist
        done, saveUserFn);
    };
}
exports.buildVerifyFn = buildVerifyFn;
/**
 * Create an instance of the google passport strategy. This wrapper fetches the configuration
 * from couchDB rather than environment variables, using this factory is necessary for dynamically configuring passport.
 * @returns Dynamically configured Passport Google Strategy
 */
function strategyFactory(config, callbackUrl, saveUserFn) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const { clientID, clientSecret } = config;
            if (!clientID || !clientSecret) {
                throw new Error("Configuration invalid. Must contain google clientID and clientSecret");
            }
            const verify = buildVerifyFn(saveUserFn);
            return new GoogleStrategy({
                clientID: config.clientID,
                clientSecret: config.clientSecret,
                callbackURL: callbackUrl,
            }, verify);
        }
        catch (err) {
            console.error(err);
            throw new Error(`Error constructing google authentication strategy: ${err}`);
        }
    });
}
exports.strategyFactory = strategyFactory;
function getCallbackUrl(db, config) {
    return __awaiter(this, void 0, void 0, function* () {
        return (0, utils_1.ssoCallbackUrl)(db, config, types_1.ConfigType.GOOGLE);
    });
}
exports.getCallbackUrl = getCallbackUrl;
//# sourceMappingURL=google.js.map