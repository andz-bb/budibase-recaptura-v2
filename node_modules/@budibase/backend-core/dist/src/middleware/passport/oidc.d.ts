import { SaveUserFunction } from "./third-party-common";
import { OIDCInnerCfg, Database, SSOProfile, OIDCConfiguration } from "@budibase/types";
declare type JwtClaims = {
    preferred_username: string;
    email: string;
};
export declare function buildVerifyFn(saveUserFn?: SaveUserFunction): (issuer: string, sub: string, profile: SSOProfile, jwtClaims: JwtClaims, accessToken: string, refreshToken: string, idToken: string, params: any, done: Function) => Promise<any>;
/**
 * Create an instance of the oidc passport strategy. This wrapper fetches the configuration
 * from couchDB rather than environment variables, using this factory is necessary for dynamically configuring passport.
 * @returns Dynamically configured Passport OIDC Strategy
 */
export declare function strategyFactory(config: OIDCConfiguration, saveUserFn?: SaveUserFunction): Promise<any>;
export declare function fetchStrategyConfig(enrichedConfig: OIDCInnerCfg, callbackUrl?: string): Promise<OIDCConfiguration>;
export declare function getCallbackUrl(db: Database, config: {
    callbackURL?: string;
}): Promise<string>;
export {};
