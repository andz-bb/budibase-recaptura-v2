"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticate = exports.options = void 0;
const constants_1 = require("../../constants");
const utils_1 = require("../../utils");
const environment_1 = __importDefault(require("../../environment"));
const users = __importStar(require("../../users"));
const utils_2 = require("./utils");
const sessions_1 = require("../../security/sessions");
const tenancy_1 = require("../../tenancy");
const jwt = require("jsonwebtoken");
const INVALID_ERR = "Invalid credentials";
const SSO_NO_PASSWORD = "SSO user does not have a password set";
const EXPIRED = "This account has expired. Please reset your password";
exports.options = {
    passReqToCallback: true,
};
/**
 * Passport Local Authentication Middleware.
 * @param {*} ctx the request structure
 * @param {*} email username to login with
 * @param {*} password plain text password to log in with
 * @param {*} done callback from passport to return user information and errors
 * @returns The authenticated user, or errors if they occur
 */
function authenticate(ctx, email, password, done) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!email)
            return (0, utils_2.authError)(done, "Email Required");
        if (!password)
            return (0, utils_2.authError)(done, "Password Required");
        const dbUser = yield users.getGlobalUserByEmail(email);
        if (dbUser == null) {
            return (0, utils_2.authError)(done, `User not found: [${email}]`);
        }
        // check that the user is currently inactive, if this is the case throw invalid
        if (dbUser.status === constants_1.UserStatus.INACTIVE) {
            return (0, utils_2.authError)(done, INVALID_ERR);
        }
        // check that the user has a stored password before proceeding
        if (!dbUser.password) {
            if ((dbUser.account && dbUser.account.authType === "sso") || // root account sso
                dbUser.thirdPartyProfile // internal sso
            ) {
                return (0, utils_2.authError)(done, SSO_NO_PASSWORD);
            }
            console.error("Non SSO usser has no password set", dbUser);
            return (0, utils_2.authError)(done, EXPIRED);
        }
        // authenticate
        if (yield (0, utils_1.compare)(password, dbUser.password)) {
            const sessionId = (0, utils_1.newid)();
            const tenantId = (0, tenancy_1.getTenantId)();
            yield (0, sessions_1.createASession)(dbUser._id, { sessionId, tenantId });
            const token = jwt.sign({
                userId: dbUser._id,
                sessionId,
                tenantId,
            }, environment_1.default.JWT_SECRET);
            // Remove users password in payload
            delete dbUser.password;
            return done(null, Object.assign(Object.assign({}, dbUser), { token }));
        }
        else {
            return (0, utils_2.authError)(done, INVALID_ERR);
        }
    });
}
exports.authenticate = authenticate;
//# sourceMappingURL=local.js.map