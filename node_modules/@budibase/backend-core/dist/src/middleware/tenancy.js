"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const tenancy_1 = require("../tenancy");
const matchers_1 = require("./matchers");
const constants_1 = require("../constants");
const types_1 = require("@budibase/types");
module.exports = function (allowQueryStringPatterns, noTenancyPatterns, opts = { noTenancyRequired: false }) {
    const allowQsOptions = (0, matchers_1.buildMatcherRegex)(allowQueryStringPatterns);
    const noTenancyOptions = (0, matchers_1.buildMatcherRegex)(noTenancyPatterns);
    return function (ctx, next) {
        return __awaiter(this, void 0, void 0, function* () {
            const allowNoTenant = opts.noTenancyRequired || !!(0, matchers_1.matches)(ctx, noTenancyOptions);
            const tenantOpts = {
                allowNoTenant,
            };
            const allowQs = !!(0, matchers_1.matches)(ctx, allowQsOptions);
            if (!allowQs) {
                tenantOpts.excludeStrategies = [types_1.TenantResolutionStrategy.QUERY];
            }
            const tenantId = (0, tenancy_1.getTenantIDFromCtx)(ctx, tenantOpts);
            ctx.set(constants_1.Header.TENANT_ID, tenantId);
            return (0, tenancy_1.doInTenant)(tenantId, next);
        });
    };
};
//# sourceMappingURL=tenancy.js.map