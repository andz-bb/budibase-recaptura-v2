import * as events from "./events";
import * as migrations from "./migrations";
import * as users from "./users";
import * as roles from "./security/roles";
import * as permissions from "./security/permissions";
import * as accounts from "./cloud/accounts";
import * as installation from "./installation";
import * as tenancy from "./tenancy";
import * as featureFlags from "./featureFlags";
import * as sessions from "./security/sessions";
import * as deprovisioning from "./context/deprovision";
import * as auth from "./auth";
import * as constants from "./constants";
import * as logging from "./logging";
import * as plugins from "./plugin";
import * as encryption from "./security/encryption";
import * as queue from "./queue";
import * as db from "./db";
import * as context from "./context";
import * as cache from "./cache";
import * as objectStore from "./objectStore";
import * as redis from "./redis";
import * as utils from "./utils";
declare const core: {
    middleware: {
        google: typeof import("./middleware/passport/google");
        oidc: typeof import("./middleware/passport/oidc");
        jwt: typeof import("./middleware/passport/jwt");
        local: typeof import("./middleware/passport/local");
        authenticated: (noAuthPatterns?: import("@budibase/types").EndpointMatcher[], opts?: {
            publicAllowed?: boolean | undefined;
            populateUser?: Function | undefined;
        }) => (ctx: any, next: any) => Promise<any>;
        auditLog: (ctx: any, next: any) => Promise<any>;
        tenancy: (allowQueryStringPatterns: import("@budibase/types").EndpointMatcher[], noTenancyPatterns: import("@budibase/types").EndpointMatcher[], opts?: {
            noTenancyRequired?: boolean | undefined;
        }) => (ctx: any, next: any) => Promise<any>;
        authError: typeof import("./middleware/passport/utils").authError;
        internalApi: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
        ssoCallbackUrl: typeof import("./middleware/passport/utils").ssoCallbackUrl;
        datasource: {
            google: typeof import("./middleware/passport/datasource/google");
        };
        csrf: (opts?: {
            noCsrfPatterns: import("@budibase/types").EndpointMatcher[];
        }) => (ctx: any, next: any) => Promise<any>;
        adminOnly: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
        builderOnly: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
        builderOrAdmin: (ctx: import("@budibase/types").BBContext, next: any) => Promise<any>;
        joiValidator: typeof import("./middleware/joi-validator");
    };
    encryption: typeof encryption;
    queue: typeof queue;
    permissions: typeof permissions;
    UsageLimitError: typeof import("./errors/licensing").UsageLimitError;
    FeatureDisabledError: typeof import("./errors/licensing").FeatureDisabledError;
    HTTPError: typeof import("./errors/http").HTTPError;
    pinoSettings(): {
        prettyPrint: {
            levelFirst: boolean;
        };
        level: string;
        autoLogging: {
            ignore: (req: {
                url: string;
            }) => boolean;
        };
    };
    redis: typeof redis;
    locks: typeof redis.redlock;
    objectStore: typeof objectStore;
    utils: typeof utils;
    users: typeof users;
    cache: typeof cache;
    auth: typeof auth;
    constants: typeof constants;
    migrations: typeof migrations;
    env: {
        isTest: () => boolean;
        isDev: () => boolean;
        JS_BCRYPT: string | undefined;
        JWT_SECRET: string | undefined;
        COUCH_DB_URL: string;
        COUCH_DB_USERNAME: string | undefined;
        COUCH_DB_PASSWORD: string | undefined;
        GOOGLE_CLIENT_ID: string | undefined;
        GOOGLE_CLIENT_SECRET: string | undefined;
        SALT_ROUNDS: string | undefined;
        REDIS_URL: string | undefined;
        REDIS_PASSWORD: string | undefined;
        MINIO_ACCESS_KEY: string | undefined;
        MINIO_SECRET_KEY: string | undefined;
        AWS_REGION: string | undefined;
        MINIO_URL: string | undefined;
        INTERNAL_API_KEY: string | undefined;
        MULTI_TENANCY: string | undefined;
        ACCOUNT_PORTAL_URL: string;
        ACCOUNT_PORTAL_API_KEY: string;
        DISABLE_ACCOUNT_PORTAL: string | undefined;
        SELF_HOSTED: boolean;
        COOKIE_DOMAIN: string | undefined;
        PLATFORM_URL: string;
        POSTHOG_TOKEN: string | undefined;
        ENABLE_ANALYTICS: string | undefined;
        TENANT_FEATURE_FLAGS: string | undefined;
        BACKUPS_BUCKET_NAME: string;
        APPS_BUCKET_NAME: string;
        TEMPLATES_BUCKET_NAME: string;
        GLOBAL_BUCKET_NAME: string;
        GLOBAL_CLOUD_BUCKET_NAME: string;
        PLUGIN_BUCKET_NAME: string;
        USE_COUCH: string | boolean;
        DISABLE_DEVELOPER_LICENSE: string | undefined;
        DEFAULT_LICENSE: string | undefined;
        SERVICE: string;
        LOG_LEVEL: string | undefined;
        SESSION_UPDATE_PERIOD: string | undefined;
        DEPLOYMENT_ENVIRONMENT: string;
        _set(key: any, value: any): void;
    };
    accounts: typeof accounts;
    tenancy: typeof tenancy;
    context: typeof context;
    featureFlags: typeof featureFlags;
    events: typeof events;
    sessions: typeof sessions;
    deprovisioning: typeof deprovisioning;
    installation: typeof installation;
    errors: {
        codes: {
            USAGE_LIMIT_EXCEEDED: string;
            FEATURE_DISABLED: string;
        };
        types: string[];
        errors: {
            UsageLimitError: typeof import("./errors/licensing").UsageLimitError;
            FeatureDisabledError: typeof import("./errors/licensing").FeatureDisabledError;
            HTTPError: typeof import("./errors/http").HTTPError;
        };
        getPublicError: (err: any) => {
            code: any;
            type: any;
        } | {
            limitName: any;
            code: any;
            type: any;
        } | {
            featureName: any;
            code: any;
            type: any;
        } | undefined;
    };
    logging: typeof logging;
    roles: typeof roles;
    plugins: typeof plugins;
    SEPARATOR: "_";
    UNICODE_MAX: "ï¿°";
    AutomationViewMode: typeof constants.AutomationViewMode;
    ViewName: typeof constants.ViewName;
    DeprecatedViews: {
        by_email2: string[];
    };
    InternalTable: typeof constants.InternalTable;
    DocumentType: typeof constants.DocumentType;
    StaticDatabases: {
        GLOBAL: {
            name: string;
            docs: {
                apiKeys: string;
                usageQuota: string;
                licenseInfo: string;
            };
        };
        PLATFORM_INFO: {
            name: string;
            docs: {
                tenants: string;
                install: string;
            };
        };
    };
    APP_PREFIX: string;
    APP_DEV: string;
    APP_DEV_PREFIX: string;
    BUDIBASE_DATASOURCE_TYPE: "budibase";
    UserStatus: typeof constants.UserStatus;
    Cookie: typeof constants.Cookie;
    Header: typeof constants.Header;
    GlobalRole: typeof constants.GlobalRole;
    Config: typeof constants.Config;
    MAX_VALID_DATE: Date;
    DEFAULT_TENANT_ID: "default";
    init: (opts?: any) => void;
    db: typeof db;
};
export = core;
