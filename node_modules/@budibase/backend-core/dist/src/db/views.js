"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.queryGlobalView = exports.queryPlatformView = exports.queryView = exports.createPlatformUserView = exports.createUserBuildersView = exports.createApiKeyView = exports.createUserAppView = exports.createAccountEmailView = exports.createNewUserEmailView = exports.createView = void 0;
const constants_1 = require("../constants");
const context_1 = require("../context");
const _1 = require("./");
const DESIGN_DB = "_design/database";
function DesignDoc() {
    return {
        _id: DESIGN_DB,
        // view collation information, read before writing any complex views:
        // https://docs.couchdb.org/en/master/ddocs/views/collation.html#collation-specification
        views: {},
    };
}
function removeDeprecated(db, viewName) {
    return __awaiter(this, void 0, void 0, function* () {
        // @ts-ignore
        if (!constants_1.DeprecatedViews[viewName]) {
            return;
        }
        try {
            const designDoc = yield db.get(DESIGN_DB);
            // @ts-ignore
            for (let deprecatedNames of constants_1.DeprecatedViews[viewName]) {
                delete designDoc.views[deprecatedNames];
            }
            yield db.put(designDoc);
        }
        catch (err) {
            // doesn't exist, ignore
        }
    });
}
function createView(db, viewJs, viewName) {
    return __awaiter(this, void 0, void 0, function* () {
        let designDoc;
        try {
            designDoc = (yield db.get(DESIGN_DB));
        }
        catch (err) {
            // no design doc, make one
            designDoc = DesignDoc();
        }
        const view = {
            map: viewJs,
        };
        designDoc.views = Object.assign(Object.assign({}, designDoc.views), { [viewName]: view });
        yield db.put(designDoc);
    });
}
exports.createView = createView;
const createNewUserEmailView = () => __awaiter(void 0, void 0, void 0, function* () {
    const db = (0, context_1.getGlobalDB)();
    const viewJs = `function(doc) {
    if (doc._id.startsWith("${constants_1.DocumentType.USER}${constants_1.SEPARATOR}")) {
      emit(doc.email.toLowerCase(), doc._id)
    }
  }`;
    yield createView(db, viewJs, constants_1.ViewName.USER_BY_EMAIL);
});
exports.createNewUserEmailView = createNewUserEmailView;
const createAccountEmailView = () => __awaiter(void 0, void 0, void 0, function* () {
    const viewJs = `function(doc) {
    if (doc._id.startsWith("${constants_1.DocumentType.ACCOUNT_METADATA}${constants_1.SEPARATOR}")) {
      emit(doc.email.toLowerCase(), doc._id)
    }
  }`;
    yield (0, _1.doWithDB)(constants_1.StaticDatabases.PLATFORM_INFO.name, (db) => __awaiter(void 0, void 0, void 0, function* () {
        yield createView(db, viewJs, constants_1.ViewName.ACCOUNT_BY_EMAIL);
    }));
});
exports.createAccountEmailView = createAccountEmailView;
const createUserAppView = () => __awaiter(void 0, void 0, void 0, function* () {
    const db = (0, context_1.getGlobalDB)();
    const viewJs = `function(doc) {
    if (doc._id.startsWith("${constants_1.DocumentType.USER}${constants_1.SEPARATOR}") && doc.roles) {
      for (let prodAppId of Object.keys(doc.roles)) {
        let emitted = prodAppId + "${constants_1.SEPARATOR}" + doc._id
        emit(emitted, null)
      }
    }
  }`;
    yield createView(db, viewJs, constants_1.ViewName.USER_BY_APP);
});
exports.createUserAppView = createUserAppView;
const createApiKeyView = () => __awaiter(void 0, void 0, void 0, function* () {
    const db = (0, context_1.getGlobalDB)();
    const viewJs = `function(doc) {
    if (doc._id.startsWith("${constants_1.DocumentType.DEV_INFO}") && doc.apiKey) {
      emit(doc.apiKey, doc.userId)
    }
  }`;
    yield createView(db, viewJs, constants_1.ViewName.BY_API_KEY);
});
exports.createApiKeyView = createApiKeyView;
const createUserBuildersView = () => __awaiter(void 0, void 0, void 0, function* () {
    const db = (0, context_1.getGlobalDB)();
    const viewJs = `function(doc) {
    if (doc.builder && doc.builder.global === true) {
      emit(doc._id, doc._id)
    }
  }`;
    yield createView(db, viewJs, constants_1.ViewName.USER_BY_BUILDERS);
});
exports.createUserBuildersView = createUserBuildersView;
const createPlatformUserView = () => __awaiter(void 0, void 0, void 0, function* () {
    const viewJs = `function(doc) {
    if (doc.tenantId) {
      emit(doc._id.toLowerCase(), doc._id)
    }
  }`;
    yield (0, _1.doWithDB)(constants_1.StaticDatabases.PLATFORM_INFO.name, (db) => __awaiter(void 0, void 0, void 0, function* () {
        yield createView(db, viewJs, constants_1.ViewName.PLATFORM_USERS_LOWERCASE);
    }));
});
exports.createPlatformUserView = createPlatformUserView;
const queryView = (viewName, params, db, createFunc, opts) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let response = yield db.query(`database/${viewName}`, params);
        const rows = response.rows;
        const docs = rows.map((row) => params.include_docs ? row.doc : row.value);
        // if arrayResponse has been requested, always return array regardless of length
        if (opts === null || opts === void 0 ? void 0 : opts.arrayResponse) {
            return docs;
        }
        else {
            // return the single document if there is only one
            return docs.length <= 1 ? docs[0] : docs;
        }
    }
    catch (err) {
        const pouchNotFound = err && err.name === "not_found";
        const couchNotFound = err && err.status === 404;
        if (pouchNotFound || couchNotFound) {
            yield removeDeprecated(db, viewName);
            yield createFunc();
            return (0, exports.queryView)(viewName, params, db, createFunc, opts);
        }
        else {
            throw err;
        }
    }
});
exports.queryView = queryView;
const queryPlatformView = (viewName, params, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const CreateFuncByName = {
        [constants_1.ViewName.ACCOUNT_BY_EMAIL]: exports.createAccountEmailView,
        [constants_1.ViewName.PLATFORM_USERS_LOWERCASE]: exports.createPlatformUserView,
    };
    return (0, _1.doWithDB)(constants_1.StaticDatabases.PLATFORM_INFO.name, (db) => __awaiter(void 0, void 0, void 0, function* () {
        const createFn = CreateFuncByName[viewName];
        return (0, exports.queryView)(viewName, params, db, createFn, opts);
    }));
});
exports.queryPlatformView = queryPlatformView;
const queryGlobalView = (viewName, params, db, opts) => __awaiter(void 0, void 0, void 0, function* () {
    const CreateFuncByName = {
        [constants_1.ViewName.USER_BY_EMAIL]: exports.createNewUserEmailView,
        [constants_1.ViewName.BY_API_KEY]: exports.createApiKeyView,
        [constants_1.ViewName.USER_BY_BUILDERS]: exports.createUserBuildersView,
        [constants_1.ViewName.USER_BY_APP]: exports.createUserAppView,
    };
    // can pass DB in if working with something specific
    if (!db) {
        db = (0, context_1.getGlobalDB)();
    }
    const createFn = CreateFuncByName[viewName];
    return (0, exports.queryView)(viewName, params, db, createFn, opts);
});
exports.queryGlobalView = queryGlobalView;
//# sourceMappingURL=views.js.map