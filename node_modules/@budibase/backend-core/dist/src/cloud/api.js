"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const node_fetch_1 = __importDefault(require("node-fetch"));
module.exports = class API {
    constructor(host) {
        this.host = host;
    }
    apiCall(method, url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!options.headers) {
                options.headers = {};
            }
            if (!options.headers["Content-Type"]) {
                options.headers = Object.assign({ "Content-Type": "application/json", Accept: "application/json" }, options.headers);
            }
            let json = options.headers["Content-Type"] === "application/json";
            const requestOptions = {
                method: method,
                body: json ? JSON.stringify(options.body) : options.body,
                headers: options.headers,
                // TODO: See if this is necessary
                credentials: "include",
            };
            return yield (0, node_fetch_1.default)(`${this.host}${url}`, requestOptions);
        });
    }
    post(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiCall("POST", url, options);
        });
    }
    get(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiCall("GET", url, options);
        });
    }
    patch(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiCall("PATCH", url, options);
        });
    }
    del(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiCall("DELETE", url, options);
        });
    }
    put(url, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.apiCall("PUT", url, options);
        });
    }
};
//# sourceMappingURL=api.js.map