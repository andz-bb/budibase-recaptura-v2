export declare const SEPARATOR = "-";
/**
 * These Redis databases help us to segment up a Redis keyspace by prepending the
 * specified database name onto the cache key. This means that a single real Redis database
 * can be split up a bit; allowing us to use scans on small databases to find some particular
 * keys within.
 * If writing a very large volume of keys is expected (say 10K+) then it is better to keep these out
 * of the default keyspace and use a separate one - the SelectableDatabase can be used for this.
 */
export declare enum Databases {
    PW_RESETS = "pwReset",
    VERIFICATIONS = "verification",
    INVITATIONS = "invitation",
    DEV_LOCKS = "devLocks",
    DEBOUNCE = "debounce",
    SESSIONS = "session",
    USER_CACHE = "users",
    FLAGS = "flags",
    APP_METADATA = "appMetadata",
    QUERY_VARS = "queryVars",
    LICENSES = "license",
    GENERIC_CACHE = "data_cache",
    WRITE_THROUGH = "writeThrough",
    LOCKS = "locks"
}
/**
 * These define the numeric Redis databases that can be access with the SELECT command -
 * (https://redis.io/commands/select/). By default a Redis server/cluster will have 16 selectable
 * databases, increasing this count increases the amount of CPU/memory required to run the server.
 * Ideally new Redis keyspaces should be used sparingly, only when absolutely necessary for performance
 * to be maintained. Generally a keyspace can grow to be very large is scans are not needed or desired,
 * but if you need to walk through all values in a database periodically then a separate selectable
 * keyspace should be used.
 */
export declare enum SelectableDatabase {
    DEFAULT = 0,
    WRITE_THROUGH = 1,
    UNUSED_1 = 2,
    UNUSED_2 = 3,
    UNUSED_3 = 4,
    UNUSED_4 = 5,
    UNUSED_5 = 6,
    UNUSED_6 = 7,
    UNUSED_7 = 8,
    UNUSED_8 = 9,
    UNUSED_9 = 10,
    UNUSED_10 = 11,
    UNUSED_11 = 12,
    UNUSED_12 = 13,
    UNUSED_13 = 14,
    UNUSED_14 = 15
}
export declare function getRedisOptions(clustered?: boolean): {
    opts: any;
    host: string;
    port: string;
    redisProtocolUrl: string | undefined;
};
export declare function addDbPrefix(db: string, key: string): string;
export declare function removeDbPrefix(key: string): string;
