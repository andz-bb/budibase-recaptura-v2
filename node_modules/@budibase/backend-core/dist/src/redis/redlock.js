"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.doWithLock = exports.newRedlock = exports.OPTIONS = void 0;
const redlock_1 = __importDefault(require("redlock"));
const init_1 = require("./init");
const types_1 = require("@budibase/types");
const tenancy = __importStar(require("../tenancy"));
let noRetryRedlock;
const getClient = (type) => __awaiter(void 0, void 0, void 0, function* () {
    switch (type) {
        case types_1.LockType.TRY_ONCE: {
            if (!noRetryRedlock) {
                noRetryRedlock = yield (0, exports.newRedlock)(exports.OPTIONS.TRY_ONCE);
            }
            return noRetryRedlock;
        }
        case types_1.LockType.DEFAULT: {
            if (!noRetryRedlock) {
                noRetryRedlock = yield (0, exports.newRedlock)(exports.OPTIONS.DEFAULT);
            }
            return noRetryRedlock;
        }
        case types_1.LockType.DELAY_500: {
            if (!noRetryRedlock) {
                noRetryRedlock = yield (0, exports.newRedlock)(exports.OPTIONS.DELAY_500);
            }
            return noRetryRedlock;
        }
        default: {
            throw new Error(`Could not get redlock client: ${type}`);
        }
    }
});
exports.OPTIONS = {
    TRY_ONCE: {
        // immediately throws an error if the lock is already held
        retryCount: 0,
    },
    DEFAULT: {
        // the expected clock drift; for more details
        // see http://redis.io/topics/distlock
        driftFactor: 0.01,
        // the max number of times Redlock will attempt
        // to lock a resource before erroring
        retryCount: 10,
        // the time in ms between attempts
        retryDelay: 200,
        // the max time in ms randomly added to retries
        // to improve performance under high contention
        // see https://www.awsarchitectureblog.com/2015/03/backoff.html
        retryJitter: 100, // time in ms
    },
    DELAY_500: {
        retryDelay: 500,
    },
};
const newRedlock = (opts = {}) => __awaiter(void 0, void 0, void 0, function* () {
    let options = Object.assign(Object.assign({}, exports.OPTIONS.DEFAULT), opts);
    const redisWrapper = yield (0, init_1.getLockClient)();
    const client = redisWrapper.getClient();
    return new redlock_1.default([client], options);
});
exports.newRedlock = newRedlock;
const doWithLock = (opts, task) => __awaiter(void 0, void 0, void 0, function* () {
    const redlock = yield getClient(opts.type);
    let lock;
    try {
        // aquire lock
        let name = `lock:${tenancy.getTenantId()}_${opts.name}`;
        if (opts.nameSuffix) {
            name = name + `_${opts.nameSuffix}`;
        }
        lock = yield redlock.lock(name, opts.ttl);
        // perform locked task
        // need to await to ensure completion before unlocking
        const result = yield task();
        return result;
    }
    catch (e) {
        console.log("lock error");
        // lock limit exceeded
        if (e.name === "LockError") {
            if (opts.type === types_1.LockType.TRY_ONCE) {
                // don't throw for try-once locks, they will always error
                // due to retry count (0) exceeded
                return;
            }
            else {
                throw e;
            }
        }
        else {
            throw e;
        }
    }
    finally {
        if (lock) {
            yield lock.unlock();
        }
    }
});
exports.doWithLock = doWithLock;
//# sourceMappingURL=redlock.js.map