"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invalidateUser = exports.getUser = void 0;
const redis = __importStar(require("../redis/init"));
const tenancy_1 = require("../tenancy");
const environment_1 = __importDefault(require("../environment"));
const accounts = __importStar(require("../cloud/accounts"));
const EXPIRY_SECONDS = 3600;
/**
 * The default populate user function
 */
function populateFromDB(userId, tenantId) {
    return __awaiter(this, void 0, void 0, function* () {
        const user = yield (0, tenancy_1.doWithGlobalDB)(tenantId, (db) => db.get(userId));
        user.budibaseAccess = true;
        if (!environment_1.default.SELF_HOSTED && !environment_1.default.DISABLE_ACCOUNT_PORTAL) {
            const account = yield accounts.getAccount(user.email);
            if (account) {
                user.account = account;
                user.accountPortalAccess = true;
            }
        }
        return user;
    });
}
/**
 * Get the requested user by id.
 * Use redis cache to first read the user.
 * If not present fallback to loading the user directly and re-caching.
 * @param {*} userId the id of the user to get
 * @param {*} tenantId the tenant of the user to get
 * @param {*} populateUser function to provide the user for re-caching. default to couch db
 * @returns
 */
function getUser(userId, tenantId, populateUser) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!populateUser) {
            populateUser = populateFromDB;
        }
        if (!tenantId) {
            try {
                tenantId = (0, tenancy_1.getTenantId)();
            }
            catch (err) {
                tenantId = yield (0, tenancy_1.lookupTenantId)(userId);
            }
        }
        const client = yield redis.getUserClient();
        // try cache
        let user = yield client.get(userId);
        if (!user) {
            user = yield populateUser(userId, tenantId);
            yield client.store(userId, user, EXPIRY_SECONDS);
        }
        if (user && !user.tenantId && tenantId) {
            // make sure the tenant ID is always correct/set
            user.tenantId = tenantId;
        }
        return user;
    });
}
exports.getUser = getUser;
function invalidateUser(userId) {
    return __awaiter(this, void 0, void 0, function* () {
        const client = yield redis.getUserClient();
        yield client.delete(userId);
    });
}
exports.invalidateUser = invalidateUser;
//# sourceMappingURL=user.js.map