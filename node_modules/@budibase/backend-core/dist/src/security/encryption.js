"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.encrypt = void 0;
const crypto_1 = __importDefault(require("crypto"));
const environment_1 = __importDefault(require("../environment"));
const ALGO = "aes-256-ctr";
const SECRET = environment_1.default.JWT_SECRET;
const SEPARATOR = "-";
const ITERATIONS = 10000;
const RANDOM_BYTES = 16;
const STRETCH_LENGTH = 32;
function stretchString(string, salt) {
    return crypto_1.default.pbkdf2Sync(string, salt, ITERATIONS, STRETCH_LENGTH, "sha512");
}
function encrypt(input) {
    const salt = crypto_1.default.randomBytes(RANDOM_BYTES);
    const stretched = stretchString(SECRET, salt);
    const cipher = crypto_1.default.createCipheriv(ALGO, stretched, salt);
    const base = cipher.update(input);
    const final = cipher.final();
    const encrypted = Buffer.concat([base, final]).toString("hex");
    return `${salt.toString("hex")}${SEPARATOR}${encrypted}`;
}
exports.encrypt = encrypt;
function decrypt(input) {
    const [salt, encrypted] = input.split(SEPARATOR);
    const saltBuffer = Buffer.from(salt, "hex");
    const stretched = stretchString(SECRET, saltBuffer);
    const decipher = crypto_1.default.createDecipheriv(ALGO, stretched, saltBuffer);
    const base = decipher.update(Buffer.from(encrypted, "hex"));
    const final = decipher.final();
    return Buffer.concat([base, final]).toString();
}
exports.decrypt = decrypt;
//# sourceMappingURL=encryption.js.map