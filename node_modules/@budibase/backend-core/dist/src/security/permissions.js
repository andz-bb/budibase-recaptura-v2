"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BUILDER = exports.isPermissionLevelHigherThanRead = exports.doesHaveBasePermission = exports.getBuiltinPermissionByID = exports.getBuiltinPermissions = exports.BuiltinPermissionID = exports.PermissionType = exports.PermissionLevel = void 0;
const { flatten } = require("lodash");
const { cloneDeep } = require("lodash/fp");
var PermissionLevel;
(function (PermissionLevel) {
    PermissionLevel["READ"] = "read";
    PermissionLevel["WRITE"] = "write";
    PermissionLevel["EXECUTE"] = "execute";
    PermissionLevel["ADMIN"] = "admin";
})(PermissionLevel = exports.PermissionLevel || (exports.PermissionLevel = {}));
// these are the global types, that govern the underlying default behaviour
var PermissionType;
(function (PermissionType) {
    PermissionType["APP"] = "app";
    PermissionType["TABLE"] = "table";
    PermissionType["USER"] = "user";
    PermissionType["AUTOMATION"] = "automation";
    PermissionType["WEBHOOK"] = "webhook";
    PermissionType["BUILDER"] = "builder";
    PermissionType["VIEW"] = "view";
    PermissionType["QUERY"] = "query";
})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));
class Permission {
    constructor(type, level) {
        this.type = type;
        this.level = level;
    }
}
function levelToNumber(perm) {
    switch (perm) {
        // not everything has execute privileges
        case PermissionLevel.EXECUTE:
            return 0;
        case PermissionLevel.READ:
            return 1;
        case PermissionLevel.WRITE:
            return 2;
        case PermissionLevel.ADMIN:
            return 3;
        default:
            return -1;
    }
}
/**
 * Given the specified permission level for the user return the levels they are allowed to carry out.
 * @param {string} userPermLevel The permission level of the user.
 * @return {string[]} All the permission levels this user is allowed to carry out.
 */
function getAllowedLevels(userPermLevel) {
    switch (userPermLevel) {
        case PermissionLevel.EXECUTE:
            return [PermissionLevel.EXECUTE];
        case PermissionLevel.READ:
            return [PermissionLevel.EXECUTE, PermissionLevel.READ];
        case PermissionLevel.WRITE:
        case PermissionLevel.ADMIN:
            return [
                PermissionLevel.READ,
                PermissionLevel.WRITE,
                PermissionLevel.EXECUTE,
            ];
        default:
            return [];
    }
}
var BuiltinPermissionID;
(function (BuiltinPermissionID) {
    BuiltinPermissionID["PUBLIC"] = "public";
    BuiltinPermissionID["READ_ONLY"] = "read_only";
    BuiltinPermissionID["WRITE"] = "write";
    BuiltinPermissionID["ADMIN"] = "admin";
    BuiltinPermissionID["POWER"] = "power";
})(BuiltinPermissionID = exports.BuiltinPermissionID || (exports.BuiltinPermissionID = {}));
const BUILTIN_PERMISSIONS = {
    PUBLIC: {
        _id: BuiltinPermissionID.PUBLIC,
        name: "Public",
        permissions: [
            new Permission(PermissionType.WEBHOOK, PermissionLevel.EXECUTE),
        ],
    },
    READ_ONLY: {
        _id: BuiltinPermissionID.READ_ONLY,
        name: "Read only",
        permissions: [
            new Permission(PermissionType.QUERY, PermissionLevel.READ),
            new Permission(PermissionType.TABLE, PermissionLevel.READ),
            new Permission(PermissionType.VIEW, PermissionLevel.READ),
        ],
    },
    WRITE: {
        _id: BuiltinPermissionID.WRITE,
        name: "Read/Write",
        permissions: [
            new Permission(PermissionType.QUERY, PermissionLevel.WRITE),
            new Permission(PermissionType.TABLE, PermissionLevel.WRITE),
            new Permission(PermissionType.VIEW, PermissionLevel.READ),
            new Permission(PermissionType.AUTOMATION, PermissionLevel.EXECUTE),
        ],
    },
    POWER: {
        _id: BuiltinPermissionID.POWER,
        name: "Power",
        permissions: [
            new Permission(PermissionType.TABLE, PermissionLevel.WRITE),
            new Permission(PermissionType.USER, PermissionLevel.READ),
            new Permission(PermissionType.AUTOMATION, PermissionLevel.EXECUTE),
            new Permission(PermissionType.VIEW, PermissionLevel.READ),
            new Permission(PermissionType.WEBHOOK, PermissionLevel.READ),
        ],
    },
    ADMIN: {
        _id: BuiltinPermissionID.ADMIN,
        name: "Admin",
        permissions: [
            new Permission(PermissionType.TABLE, PermissionLevel.ADMIN),
            new Permission(PermissionType.USER, PermissionLevel.ADMIN),
            new Permission(PermissionType.AUTOMATION, PermissionLevel.ADMIN),
            new Permission(PermissionType.VIEW, PermissionLevel.ADMIN),
            new Permission(PermissionType.WEBHOOK, PermissionLevel.READ),
            new Permission(PermissionType.QUERY, PermissionLevel.ADMIN),
        ],
    },
};
function getBuiltinPermissions() {
    return cloneDeep(BUILTIN_PERMISSIONS);
}
exports.getBuiltinPermissions = getBuiltinPermissions;
function getBuiltinPermissionByID(id) {
    const perms = Object.values(BUILTIN_PERMISSIONS);
    return perms.find(perm => perm._id === id);
}
exports.getBuiltinPermissionByID = getBuiltinPermissionByID;
function doesHaveBasePermission(permType, permLevel, rolesHierarchy) {
    const basePermissions = [
        ...new Set(rolesHierarchy.map(role => role.permissionId)),
    ];
    const builtins = Object.values(BUILTIN_PERMISSIONS);
    let permissions = flatten(builtins
        .filter(builtin => basePermissions.indexOf(builtin._id) !== -1)
        .map(builtin => builtin.permissions));
    for (let permission of permissions) {
        if (permission.type === permType &&
            getAllowedLevels(permission.level).indexOf(permLevel) !== -1) {
            return true;
        }
    }
    return false;
}
exports.doesHaveBasePermission = doesHaveBasePermission;
function isPermissionLevelHigherThanRead(level) {
    return levelToNumber(level) > 1;
}
exports.isPermissionLevelHigherThanRead = isPermissionLevelHigherThanRead;
// utility as a lot of things need simply the builder permission
exports.BUILDER = PermissionType.BUILDER;
//# sourceMappingURL=permissions.js.map