export declare type RoleHierarchy = {
    permissionId: string;
}[];
export declare enum PermissionLevel {
    READ = "read",
    WRITE = "write",
    EXECUTE = "execute",
    ADMIN = "admin"
}
export declare enum PermissionType {
    APP = "app",
    TABLE = "table",
    USER = "user",
    AUTOMATION = "automation",
    WEBHOOK = "webhook",
    BUILDER = "builder",
    VIEW = "view",
    QUERY = "query"
}
declare class Permission {
    type: PermissionType;
    level: PermissionLevel;
    constructor(type: PermissionType, level: PermissionLevel);
}
export declare enum BuiltinPermissionID {
    PUBLIC = "public",
    READ_ONLY = "read_only",
    WRITE = "write",
    ADMIN = "admin",
    POWER = "power"
}
export declare function getBuiltinPermissions(): any;
export declare function getBuiltinPermissionByID(id: string): {
    _id: BuiltinPermissionID;
    name: string;
    permissions: Permission[];
} | {
    _id: BuiltinPermissionID;
    name: string;
    permissions: Permission[];
} | {
    _id: BuiltinPermissionID;
    name: string;
    permissions: Permission[];
} | {
    _id: BuiltinPermissionID;
    name: string;
    permissions: Permission[];
} | {
    _id: BuiltinPermissionID;
    name: string;
    permissions: Permission[];
} | undefined;
export declare function doesHaveBasePermission(permType: PermissionType, permLevel: PermissionLevel, rolesHierarchy: RoleHierarchy): boolean;
export declare function isPermissionLevelHigherThanRead(level: PermissionLevel): boolean;
export declare const BUILDER = PermissionType.BUILDER;
export {};
